{
  "name": "router",
  "version": "0.4.11",
  "description": "A lean and mean web router",
  "contributors": [
    {
      "name": "Mathias Buus Madsen",
      "email": "m@ge.tt"
    },
    {
      "name": "Ian Jorgensen"
    }
  ],
  "main": "./index.js",
  "dependencies": {
    "common": ">=0.1.0"
  },
  "readme": "# Router\nA lean and mean web router for [node.js](http://nodejs.org).  \nIt is available through npm:\n\n\tnpm install router\n\t\nThe router routes using the method and a [.net](http://msdn.microsoft.com/en-us/library/cc668201.aspx) inspired pattern\n\n``` js\nvar router = require('router').create();\n\nrouter.get('/', function(request, response) {\n\tresponse.writeHead(200);\n\tresponse.end('hello index page');\n});\n\nrouter.listen(8080); // start the server on port 8080\n```\n\nIf you want to grap a part of the path you can use capture groups in the pattern:\n\n``` js\nrouter.get('/{base}', function(request, response) {\n\tvar base = request.params.base; // ex: if the path is /foo/bar, then base = foo\n});\n```\n\nThe capture patterns matches until the next `/` or character present after the group\n\n``` js\nrouter.get('/{x}x{y}', function(request, response) {\n\t// if the path was /200x200, then request.params = {x:'200', y:'200'}\n});\n```\n\nOptional patterns are supported by adding a `?` at the end\n\n``` js\nrouter.get('/{prefix}?/{top}', function(request, response) {\n\t// matches both '/a/b' and '/b'\n});\n```\n\nIf you want to just match everything you can use a wildcard `*` which works like unix wildcards\n\n``` js\nrouter.get('/{prefix}/*', function(request, response) {\n\t// matches both '/a/', '/a/b', 'a/b/c' and so on.\n\t// the value of the wildcard is available through request.params.wildcard\n});\n```\n\nIf the standard capture groups aren't expressive enough for you can specify an optional inline regex \n\n``` js\nrouter.get('/{digits}([0-9]+)', function(request, response) {\n\t// matches both '/24' and '/424' but not '/abefest' and so on.\n});\n```\n\nYou can also use regular expressions and the related capture groups instead:\n\n``` js\nrouter.get(/^\\/foo\\/(\\w+)/, function(request, response) {\n\tvar group = request.params[1]; // if path is /foo/bar, then group is bar\n});\n```\n\nBesides `get` the avaiable methods are `options`, `post`, `put`, `head`, `del`, `all` and `upgrade`.\n`all` matches all the standard http methods and `upgrade` is usually used for websockets.",
  "_id": "router@0.4.11",
  "_from": "router@~0.4.6"
}
